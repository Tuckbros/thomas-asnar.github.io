<?xml version="1.0" encoding="UTF-8"?> <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"> <channel><title>Thomas ASNAR</title> <description></description><link>http://thomas-asnar.github.io/</link> <atom:link href="http://thomas-asnar.github.io/feed.xml" rel="self" type="application/rss+xml"/> <pubDate>Sun, 01 Feb 2015 19:55:54 +0000</pubDate> <lastBuildDate>Sun, 01 Feb 2015 19:55:54 +0000</lastBuildDate> <generator>Jekyll v2.5.3</generator> <item><title>tlist amélioré affichage script paramètres et autres champs</title> <description>Pour tous les frustrés du tlist VTOM qui est assez pauvre en informations,voici mon tlist (ok je sais, il y a la "Recherche" dans l'IHM mais le mode commande tlist est loin d'être suffisant). Je m'en sers notamment pour chercher tous les jobs avec un certain script et un certain paramètre, pour les mettre à STOP ou sortir un fichier csv. Et tout ça en mode commande. &lt;!--more--&gt; Grâce au vtexport en xml, il permet de lister rapidement les applications et les jobs avec les champs et les options suivantes : &lt;pre lang="shell"&gt; Liste des options :Parametres Valeurs / Formats Caracteristiques ----------- ----------------- ------------------------------------------------------- -h Affiche l'aide -f ENV[/APP][/JOB] Filtre sur environnement/application/traitement (le nom de l'application ou du traitement est optionnel) -novt Ne re-genere pas un nouvel vtexport -myvt path Specifie le chemin du fichier vtexport.xml (couple avec l'option -novt, permet de specifier votre fichier vtexport.xml) -app N'affiche que les applications -job N'affiche que les traitements -encours Filtre les traitements en cours d'execution -items item[/item].. N'affiche que certains items dans la liste -searchJ item=value Filtre les jobs selon une recherche de pattern sur un ou plusieurs items -excludeJ item=value Exclure les jobs selon une recherche de pattern sur un ou plusieurs items -csv motif Permet de specifier un motif de separation (; par defaut) -output path/fic Permet de rediriger la sortie standard vers un fichier -status R|U|F|W|E Permet de filtrer les jobs avec un certain statut R=En cours;U=Non planifie;F=Termine;W=A venir;E=Erreur -nofirstline N'affiche pas la premiere ligne recapitulative d item -debug Affiche la requete XPathListe des items et sortie a l'ecran par defaut : item;env;app;job;minStart;maxStart;maxLength;cycleEnabled;cycle;mode;retained;onDemand;daysInWeek;daysInMonth;weeksInMonth;monthsInYear;isFormula;formula;comment;information;date;user;status;host;queue;script;parameter;Liste des items pris en charge par searchJ et excludeJ : env | app | job | status | cycleEnabled | script | parameter[position] | host | mode | onDemand | queue | user | retainedSignification des valeurs : Planning 1 = yes ; 0 = no ; B = Both (chome + ouvre) ; W = Worked (ouvre) ; N = No (chome)Mode; J = traitement ; O = stop ; T = test ; S = simulation ; E = executionStatus; R = En cours ; U = Non planifie ; F = Termine ; W = A venir ; E = En erreurExemples : $0 -novt -myvt /tmp/monvtexport.xml -items env/app/job/parameter -searchJ script=netbackup -searchJ env=PROD -excludeJ job=CFG$0 -searchJ parameter1=MA_POLICIE_NETBACKUP $0 &gt; /tmp/domaine_prod.csv &lt;/pre&gt; &lt;a href="/wp-content/uploads/tlist.pl"&gt;tlist amélioré VTOM&lt;/a&gt;Vous pouvez tester ce code sur codingground à cette adresse : &lt;a href="http://goo.gl/uktCdI"&gt;http://goo.gl/uktCdI&lt;/a&gt; Sur cette adresse, pour installer le module XML::LibXML, lancer la commande : &lt;pre lang="shell"&gt;sh build_XML_LibXML.sh&lt;/pre&gt; Vous pouvez uploader votre fichier vtexport, testez le script en n'oubliant pas de spécifier -novt et -myvt nomvotrevtexport (évidemment VTOM n'est pas installé, il n'y a donc pas la commande vtexport) </description> <pubDate>Wed, 17 Dec 2014 21:13:00 +0000</pubDate><link>http://thomas-asnar.github.io/2014/12/17/vtom-tlist-ameliore-affichage-script-parametres-et-autres-champs/</link> <guid isPermaLink="true">http://thomas-asnar.github.io/2014/12/17/vtom-tlist-ameliore-affichage-script-parametres-et-autres-champs/</guid> <category>perl</category> <category>script</category> <category>tlist</category> <category>visual tom</category> <category>vtom</category> </item> <item><title>Application n tiers</title> <description>&lt;p &gt;&amp;Agrave; force de travailler dans des domaines bien spécifiques (entreprise scindée en plusieurs cellules, aux métiers de production informatique bien différents, avec leurs propres missions), on ne sait plus très bien ce que font nos collègues (et vice versa, c'est ça d'avoir toujours la tête dans le guidon !). Comme j'aime m'intéresser à tous les aspects d'une production informatique, je me suis renseigné auprès de mes camarades sur l'architecture générale de nos Systèmes d'Information (SI).&lt;/p&gt; &lt;p &gt;N'ayant à la bouche que cette "application 3 Tiers", j'ai décidé d'investiguer et me suis amusé à dessiner un schéma. J'ai pris pour exemple le Système d'Information de la Maintenance de l'Armée de Terre (SIM@T).&lt;/p&gt; &lt;p &gt;&lt;!--more--&gt;&lt;/p&gt; &lt;p &gt;La structure de SIM@T est basée sur une application 3 tiers. C’est un modèle logique d’architecture applicative qui scinde une application en trois couches dont les rôles sont clairement définis :&lt;/p&gt;&lt;ul&gt; &lt;li&gt; &lt;p &gt;présentation des données : c’est le portail,&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p &gt;traitement métier des données par les serveurs applicatifs,&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p &gt;accès aux données par le Système de Gestion de base de données (SGBD).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p &gt;&lt;a href=" /wp-content/uploads/application-3-tiers.jpg"&gt;&lt;img src=" /wp-content/uploads/application-3-tiers-1024x720.jpg" alt="application-3-tiers" width="788" height="554" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p &gt;Mon domaine d’exploitation (entouré de pointillés) est centré sur un ensemble de matériels et d’applications transverses. Ces dernières permettent la viabilité de l’application SIM@T :&lt;/p&gt;&lt;ul&gt; &lt;li&gt; &lt;p le stockage en constitue le socle grâce à son architecture en constante consolidation&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;la sauvegarde en assure la pérennité en sécurisant les données&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;l'ordonnanceur VTOM libère les services d’exploitation en automatisant les tâches répétitives et technico-fonctionnelles&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; </description> <pubDate>Sun, 13 Jul 2014 16:00:00 +0000</pubDate><link>http://thomas-asnar.github.io/2014/07/13/application-3-tiers/</link> <guid isPermaLink="true">http://thomas-asnar.github.io/2014/07/13/application-3-tiers/</guid> <category>application</category> <category>architecture</category> <category>n-tiers</category> <category>ordonnancement</category> <category>san</category> <category>stockage</category> <category>système d'information</category> <category>visual tom</category> <category>vtom</category> </item> <item><title>Ecrire sa queue batch VTOM (cygwin, php, perl, sap)</title> <description>Dans cet article, nous verrons comment scripter de nouvelles queues batch VTOM (autres que celles fournies par défaut) et comment les mettre en place. VTOM est en cela simple et puissant à la fois. Il permet de définir des contextes d'environnement par queue batch. En gros, tout ce que vous pouvez lancer à la main depuis une invite de commande, VTOM peut aussi le lancer (et même ce que vous ne pouvez pas, comme lancer une programme SAP avec ses variantes, grâce à des connecteurs comme vtom2sap)&lt;!--more--&gt; La queue batch n'est jamais qu'un script que vous allez pouvoir personnaliser. Dans le monde Unix, le bdaemon (normalement installé en root avec le sticky bit) &lt;pre&gt;28901447 336 -rw&lt;strong&gt;s&lt;/strong&gt;r-xr-x 1 root root 336732 jui 8 2011 bdaemon &lt;/pre&gt; va "forker" la queue avec : &lt;ul&gt; &lt;li&gt;en paramètres, ceux définis sous VTOM&lt;/li&gt; &lt;li&gt;en utilisateur de lancement, l'utilisateur défini sous VTOM&lt;/li&gt; &lt;/ul&gt; Regardez comment les choses fonctionnent ci-après avec les PID et le PPID : &lt;pre&gt;User ID ParentID root &lt;strong&gt;12672&lt;/strong&gt; 1 /opt/vtom/abm/bin/bdaemon vtom &lt;em&gt;7424&lt;/em&gt; &lt;strong&gt;12672&lt;/strong&gt; -ksh /opt/vtom/admin/tom_submit.ksh param1 param2 param3 vtom 7457 &lt;em&gt;7424&lt;/em&gt; /opt/vtom/scripts/luke.sh param1 param2 param3 vtom 8792 &lt;em&gt;7424&lt;/em&gt; /opt/vtom/abm/bin/tsend -sT -r0 -mtermine (0) &lt;/pre&gt; C'est aussi dans la queue batch que vous allez définir le "layout" de votre log (autre que ceux que retourne le script en entrée standard et erreur). Vous pouvez aussi rajouter des pré-traitements et des posts-traitements pour chaque queue si vous le souhaitez (ex. définir un contexte oracle pour lancer un dump, envoyer une alerte à nagios, un mail, etc. etc.)&lt;strong&gt;Un petit mot sur le tsend&lt;/strong&gt;. Ce binaire permet de renvoyer au TOM_REMOTE_SERVER définit (par défaut, celui qui a ordonnancé le traitement) l'état dans lequel on veut que soit le traitement sous VTOM. Généralement, on récupère le code retour du script, on le traite comme étant OK ou KO et on renvoi le tsend en fonction. Pour info, l'option tsend -r permet d'afficher le code retour directement sous VTOM entre crochets.&lt;i&gt;&amp;lt;edit 17/12/2014&amp;gt;&lt;/i&gt;Attention ! pour les clients en DMZ (connectToClient = 0), le tsend avec les options -e TOM_ENVIRONMENT -a ... -j ... ne fonctionnent pas. Il faut enlever ces options sinon le tsend tente de communiquer avec le vtserver, ce qui n'est pas possible pour les clients en DMZ.&lt;i&gt;&amp;lt;edit&amp;gt;&lt;/i&gt;Je vais détailler la queue Cygwin et mettre en téléchargement les autres. (qui sont sensiblement les mêmes hormis SAP) &lt;h1&gt;Queue Cygwin :&lt;/h1&gt; Le système d'exploitation de votre client VTOM est Windows et vous souhaitez émuler un shell unix ? Cygwin est là pour vous (ou MKS mais payant, personnellement j'ai migré sous cygwin sans soucis) &lt;a title="Queue cygwin" href="/wp-content/uploads/Submit_queue_cygwin.txt" target="_blank"&gt;Submit_queue_cygwin&lt;/a&gt; A renommer en .bat et path des binaires à modifier &lt;pre lang="dos"&gt;@echo off rem inclut le répertoire binaire de cygwin dans le path set PATH=e:cygwinbin;%PATH% set CYG=bash.exerem les deux commandes qui suivent rem obligent à définir un path+script et non un binaire comme echo rem au pire, il faut encapsuler votre binaire dans un .shrem path WINDOWS en path UNIX rem substitution de caractères %nom:a=b% tous les a deviennent des b set SCRIPT_PATH=%TOM_SCRIPT:=/%rem transforme les sauts de ligne etc windows en unix %CYG% -c 'dos2unix %SCRIPT_PATH%' echo. rem Layout du log echo _________________________________________ echo. echo Contexte Visual TOM du traitement echo Machine.............: %COMPUTERNAME% echo Machine VTOM........: %TOM_HOST% echo Utilisateur.........: %TOM_USER% echo Script..............: %TOM_SCRIPT% rem petite boucle pour récupérer les paramètres :argloop shift if "%0"=="" goto argend set arg=%arg% %0 goto argloop :argend rem Je viens de voir dans mes variables d'environnement %TOM_SCRIPT_ARGS% rem à voir si ça marche auquel cas pas besoin de cette boucle echo Parametres..........: %arg% echo Serveur Visual TOM..: %TOM_REMOTE_SERVER% echo Traitement..........: %TOM_JOB% echo Application.........: %TOM_APPLICATION% echo Environnement.......: %TOM_ENVIRONMENT% echo Job ID..............: %TOM_JOB_ID% echo Mode Execution......: %TOM_JOB_EXEC% echo Date d'exploitation.: %TOM_DATE% echo Valeur de la date...: %TOM_DATE_VALUE% echo Log des erreurs.....: %TOM_LOG_PATH_E% echo Log des sorties.....: %TOM_LOG_PATH_O% echo Action sur les logs.: (%TOM_LOG_ACTION%) echo Directory des logs..: %TOM_LOG_DIR% echo. echo _________________________________________ echo Debut de l'execution du traitement %TOM_ENVIRONMENT% / %TOM_APPLICATION% / %TOM_JOB% date /T rem troncature de caractères %nomdelavariable:~+ou-début,nombredecaractères% echo %time:~+0,8% echo. rem exécution du script et récupération du code retour %CYG% -c "%SCRIPT_PATH% %arg%" set TOM_STATUS=%ERRORLEVEL% echo. date /T echo %time:~+0,8% echo Fin du traitement"' echo _________________________________________ echo Determination du Status de terminaison echo.rem c'est ici qu'on va pouvoir gérer les codes retours rem rien oblige à ce que 0 soit le seul code retour OK rem mais c'est le cas le plus courant if "%TOM_STATUS%"=="0" goto TERMINE goto ERREUR:ERREUR rem le fameux tsend qui permet de statuer le traitement sous VTOM rem l'option -r"n°coderetour" est bien pratique pour visualiser le code retour rem directement entre crochet sur le traitement dans VTOM %ABM_BIN%tsend -sE -r"%TOM_STATUS%" -m'ERRORLEVEL=%TOM_STATUS%' echo Exit-^&gt;%TOM_STATUS% - Abort sans acquitement goto FIN:TERMINE %ABM_BIN%tsend -sT -r"%TOM_STATUS%" echo Exit-^&gt;%TOM_STATUS% * Terminaison avec acquitement:FIN if not "%TOM_LOG_ACTION%"==" " call %ABM_BIN%Gestlog_wnt.bat echo _________________________________________ echo Fin d'exécution de la file d'attente exit %TOM_STATUS% :DIE&lt;/pre&gt; &lt;h1&gt;Queue Perl :&lt;/h1&gt; &lt;a title="Queue PERL" href="/wp-content/uploads/Submit_queue_perl.txt" target="_blank"&gt;Submit_queue_perl&lt;/a&gt; A renommer en .bat et path des binaires à modifier Je tiens à préciser que c'est une queue batch écrite en .bat pour lancer des scripts perl mais elle n'est pas écrite en perl. &lt;h1&gt;Queue Php :&lt;/h1&gt; &lt;a title="Queue PHP" href="/wp-content/uploads/Submit_queue_php.txt" target="_blank"&gt;Submit_queue_php&lt;/a&gt; A renommer en .bat et path des binaires à modifier &lt;h1&gt;Variables VTOM pour la queue batch :&lt;/h1&gt; Beaucoup d'objets ou de champs définis sous VTOM sont variabilisés et vous pouvez les traiter comme bon vous semble dans vos queues batch. &lt;pre&gt;Description Variable Windows ou Linux Script :                        %TOM_SCRIPT% ou $TOM_SCRIPT Machine nom logique : $TOM_LOGICAL_HOST Machine nom physique :  %TOM_HOST% ou $TOM_HOST Utilisateur de lancement : %TOM_USER% ou $TOM_USER Serveur Visual TOM :       %TOM_REMOTE_SERVER% ou $TOM_REMOTE_SERVER Traitement :                    %TOM_JOB% ou $TOM_JOB Application :                   %TOM_APPLICATION% ou $TOM_APPLICATION Environnement :               %TOM_ENVIRONMENT% ou $TOM_ENVIRONMENT Job ID :                        %TOM_JOB_ID% ou $TOM_JOB_ID Mode Exécution :              %TOM_JOB_EXEC% ou $TOM_JOB_EXEC Date d'exploitation :          %TOM_DATE% ou $TOM_DATE Valeur de la date :             %TOM_DATE_VALUE% ou $TOM_DATE_VALUE Log des erreurs :               %TOM_LOG_PATH_E% ou $TOM_LOG_PATH_E Log des sorties :               %TOM_LOG_PATH_O% ou $TOM_LOG_PATH_O Action sur les logs :           %TOM_LOG_ACTION% ou $TOM_LOG_ACTION Répertoire des logs :         %TOM_LOG_DIR% ou $TOM_LOG_DIR Paramètres du script : $TOM_SCRIPT_ARGS Champ famille : $TOM_FAMILY Répertoire racine : $TOM_HOME &lt;/pre&gt; &lt;strong&gt;&lt;em&gt;Petite astuce&lt;/em&gt;&lt;/strong&gt; : Vous voulez connaître toutes les variables envoyées à votre queue ? La queue fonctionne comme n'importe quel script. Configurez votre queue, ne mettez que la commande SET ou ENV (rajouter le tsend si vous ne voulez pas d'erreur). Regarder le log et vous aurez toutes les variables d'environnement y compris celles des objets envoyés par VTOM à la queue. &lt;h1&gt;Mettre en place une queue batch sous :&lt;/h1&gt; &lt;h2 id="install_windows"&gt;Winows :&lt;/h2&gt; Pour qu'elle soit prise en compte, une nouvelle queue_bactch doit être rajoutée dans le vtom.ini (le plus souvent dans votre répertoire racine de windows, %SYSTEMROOT%) avec le nombre d'exécutions simultanées. ABM_QUEUES=/queue_wnt:10 /queue_cygwin:10Le nom de la queue doit être du type : Submit_queue_nom.bat Le queue doit être placé dans votre répertoire bin client (le plus souvent VTOMABMBIN, %ABM_BIN%) &lt;h2&gt;Unix :&lt;/h2&gt; Vous devriez avoir quelque chose dans ce style : &lt;pre&gt;[/opt/vtom/abm/config]#ls managers queues &lt;/pre&gt; Utilisateurs pouvant gérer le bdaemon, dont &lt;strong&gt;adminc&lt;/strong&gt; (client VTOM) &lt;pre&gt;[/opt/vtom/abm/config]#cat managers root vtom &lt;/pre&gt; Dans le répertoire queues, vous devez créer votre répertoire : &lt;pre&gt;[/opt/vtom/abm/config/queues]#cp -p queue_ksh queue_oracle[/opt/vtom/abm/config/queues]#ls -lisa 28901425 4 drwxr-xr-x 2 vtom vtom 4096 jui 8 2011 $job$ 28901428 4 drwxr-xr-x 2 vtom vtom 4096 jui 8 2011 $none$ 28901419 4 drwxr-xr-x 2 vtom vtom 4096 jui 8 2011 queue_csh 28901431 4 drwxr-xr-x 2 vtom vtom 4096 avr 18 16:51 queue_ksh 28934469 4 drwxr-xr-x 2 vtom vtom 4096 sep 20 2011 queue_mig 28901431 4 drwxr-xr-x 2 vtom vtom 4096 avr 18 16:51 queue_oracle 28901434 4 drwxr-xr-x 2 vtom vtom 4096 jui 8 2011 queue_perl 28901439 4 drwxr-xr-x 2 vtom vtom 4096 mar 31 2011 queue_rexx 28901437 4 drwxr-xr-x 2 vtom vtom 4096 sep 9 2011 queue_sap 28901422 4 drwxr-xr-x 2 vtom vtom 4096 jui 8 2011 queue_sh 28901416 4 drwxr-xr-x 2 vtom vtom 4096 jui 8 2011 queue_tcsh[/opt/vtom/abm/config/queues/queue_oracle]#ls -lisa 28901495 4 -rwxr-xr-x 1 vtom vtom 28 avr 18 16:51 queue.conf 28901433 4 -rwxr-xr-x 1 vtom vtom 10 mar 31 2011 users &lt;/pre&gt; Pour ne pas m'embrouiller, je mets le même nom partout &lt;pre&gt;[/opt/vtom/abm/config/queues/queue_oracle]#cat queue.conf queue_oracle 64 -1 /opt/vtom/abm/bin/oracle 20 &lt;/pre&gt; Ici 64 = nombre de jobs max en simultanés, -1 = nombre max illimité de jobs en attente, /opt/vtom/abm/bin/oracle le shell ou le lien vers un shell, &lt;strong&gt;Attention !&lt;/strong&gt; Le lien vers le shell doit exister au pire il faut créer un lien symbolique (ln -s /bin/ksh /opt/vtom/abm/bin/oracle) 20 = sert pour prioriser mais j'ai jamais utiliséPour que n'importe quel utilisateur puisse lancer la queue : &lt;pre&gt;[/opt/vtom/abm/config/queues/queue_ksh]#cat users any:-1:-1 &lt;/pre&gt; Ou alors par exemple, je veux que l'utilisateur oracle ne lance que 3 jobs à la fois avec un nombre max illimité de jobs en attente : &lt;pre&gt;[/opt/vtom/abm/config/queues/queue_ksh]#cat users oracle:3:-1 &lt;/pre&gt; Votre queue doit être créer dans le répertoire admin avec les autres tom_submit.xxx &lt;pre&gt;[/opt/vtom/admin]cp -p tom_submit.ksh tom_submit.oracle &lt;/pre&gt; N'oubliez pas de redémarrer l'agent VTOM.A vous de personnaliser comme bon vous semble votre nouvelle queue_oracle !N'hésitez à me solliciter. </description> <pubDate>Fri, 07 Sep 2012 13:39:00 +0000</pubDate><link>http://thomas-asnar.github.io/2012/09/07/ecrire-sa-queue-batch-vtom-cygwin-php-perl/</link> <guid isPermaLink="true">http://thomas-asnar.github.io/2012/09/07/ecrire-sa-queue-batch-vtom-cygwin-php-perl/</guid> <category>cmd</category> <category>cygwin</category> <category>ordonnancement</category> <category>perl</category> <category>php</category> <category>queue</category> <category>queue batch</category> <category>queues batch</category> <category>sap</category> <category>script</category> <category>shell</category> <category>visual tom</category> <category>vtom</category> </item> </channel> </rss>